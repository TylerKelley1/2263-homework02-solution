/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    //Apply project lombok
    id "io.freefair.lombok" version "6.2.0"
    //Apply jacoco test report
    id 'jacoco'
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // Ikonli Text Icons
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.1.0'
    implementation 'org.kordamp.ikonli:ikonli-fontawesome5-pack:12.1.0'
    implementation 'org.kordamp.ikonli:ikonli-materialdesign2-pack:12.1.0'
    implementation 'org.kordamp.ikonli:ikonli-material2-pack:12.1.0'

    // Use mockito testing with junit
    testImplementation 'org.mockito:mockito-inline:4.0.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.0.0'

    //JavaFX testing dependency
    testImplementation "org.testfx:testfx-core:4.0.16-alpha"
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.13.2'

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.1'
}

application {
    // Define the main class for the application.
    mainClass = 'edu.isu.cs.cs2263.hw02.App'
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
    // Generate test report after tests
    finalizedBy jacocoTestReport
}

javafx {
    version = "17"
    modules = ['javafx.controls']
}
jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport{
    dependsOn test
}

test{
    finalizedBy jacocoTestReport
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.85
            }
        }

    }
}
